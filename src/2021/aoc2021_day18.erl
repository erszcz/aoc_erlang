-module(aoc2021_day18).

-behavior(aoc_puzzle).

-include_lib("eunit/include/eunit.hrl").

-export([parse/1, solve1/1, solve2/1, info/0]).

-compile([export_all, nowarn_export_all]).

-include("aoc_puzzle.hrl").

-spec info() -> aoc_puzzle().
info() ->
    #aoc_puzzle{module = ?MODULE,
                year = 2021,
                day = 18,
                name = "Snailfish",
                expected = {3486, 4747},
                has_input_file = false}.

-type input_type() :: [integer() | list()].
-type result_type() :: integer().

-spec parse(Binary :: binary()) -> input_type().
parse(_Binary) ->
    %% This days input file is almost a Erlang list literal, just had to add a %
    %"," at the end of each line and enclose with "[...]".
    [[[[[4, 0], 6], [4, 4]], [[6, 8], 0]],
     [[1, [[1, 6], 0]], [[[8, 9], 2], [[0, 8], [5, 5]]]], [[3, 8], 7],
     [[[8, 4], [[4, 4], 4]], [[3, [0, 7]], 0]], [[[[2, 0], [4, 5]], [7, [2, 8]]], 5],
     [[9, 7], [[[8, 6], 3], [8, [0, 2]]]], [[4, 9], [2, [[8, 4], 2]]],
     [9, [[[2, 6], [3, 2]], [[2, 5], [0, 0]]]],
     [[[9, [8, 4]], [7, [1, 2]]], [[4, [5, 6]], [[5, 9], [7, 5]]]],
     [[[0, [7, 5]], [[1, 8], 1]], [[1, [1, 9]], 9]], [[[0, [4, 5]], [[1, 2], [5, 0]]], 9],
     [[[[7, 7], 3], 1], [[0, [0, 7]], [[7, 1], [1, 9]]]], [[9, 2], [3, [8, [6, 1]]]],
     [[8, [5, [3, 9]]], [1, [3, 8]]], [[1, [[4, 4], [4, 2]]], 4],
     [[[5, 1], [7, [3, 5]]], [[9, [8, 4]], 9]], [[5, [0, 4]], [[1, [6, 5]], 9]],
     [[[1, 0], [4, 1]], [[1, [3, 2]], 2]], [[[0, [5, 9]], [9, [7, 2]]], [[4, 3], [0, 7]]],
     [[[[7, 9], [0, 4]], [[5, 6], [0, 7]]], [7, [[1, 1], [9, 5]]]],
     [[[[2, 6], 7], [[8, 5], 8]], [1, 6]], [[1, [5, 5]], [[[3, 0], [1, 1]], [8, 3]]],
     [[[[7, 4], 5], [1, 3]], [[6, 9], [[3, 7], 2]]], [[6, [9, [0, 6]]], 1],
     [8, [4, [2, [2, 7]]]], [[[7, 6], [2, 8]], [[4, [8, 1]], 0]], [4, 9],
     [[[[6, 9], [1, 7]], [[4, 3], [4, 3]]], [[[4, 4], [3, 6]], [7, [7, 0]]]],
     [[[7, 4], [[9, 1], [9, 4]]], [6, [[0, 4], [4, 6]]]],
     [[[[3, 0], [4, 7]], [[8, 2], [3, 9]]], [4, [0, [5, 6]]]],
     [[[[1, 9], [0, 4]], 2], [8, [4, [0, 9]]]], [[[[9, 6], [3, 7]], 4], [7, [[0, 9], [5, 8]]]],
     [[5, [[4, 0], [0, 4]]], [[0, 1], [2, [6, 0]]]],
     [[[2, [9, 8]], [[7, 9], [6, 6]]], [[4, [6, 4]], [[2, 0], [5, 0]]]],
     [[[[5, 8], 8], [[3, 1], 1]], [[5, 7], 5]], [[8, [5, 1]], [[[5, 5], 8], [4, 6]]],
     [7, [[[3, 9], 3], [8, 6]]], [[[[8, 6], 4], 8], [[7, [4, 0]], [[8, 0], 4]]],
     [[[[7, 0], 8], [[7, 7], 1]], [[0, 5], [[8, 2], 5]]], [4, [3, [3, [6, 1]]]],
     [[1, [[7, 1], [1, 2]]], 9], [[[9, [5, 7]], [4, [4, 7]]], 8],
     [[[3, [7, 2]], [[5, 8], 6]], [2, 0]], [8, [0, [[7, 4], [3, 3]]]],
     [[[[3, 4], [1, 1]], 3], [[[5, 3], 0], [[0, 7], [6, 9]]]], [3, [[9, 1], [3, [0, 0]]]],
     [[[[8, 8], [3, 7]], [7, 6]], [[[4, 7], [9, 5]], [5, 8]]],
     [[[[9, 0], [5, 6]], [[7, 9], 5]], 0], [[0, 3], [[[9, 9], [8, 9]], [[7, 5], 0]]],
     [6, [[2, 0], 3]], [[[9, 3], [[6, 9], [8, 2]]], [7, [[1, 3], [0, 5]]]],
     [[[[9, 5], 1], 5], [[4, 2], [8, [9, 5]]]], [[8, 4], [[4, [8, 3]], [8, [8, 3]]]],
     [[[[8, 0], [4, 4]], [5, 2]], [[[0, 6], [4, 0]], [5, 8]]], [[0, 4], [3, [[2, 3], 7]]],
     [[[[6, 9], [3, 0]], 8], [[[4, 7], [6, 1]], [2, 0]]], [5, [[9, [5, 1]], 7]],
     [[[8, 0], [[5, 0], 0]], [[4, [0, 7]], [[6, 4], 0]]], [[[1, [0, 2]], 1], 8],
     [[[[4, 8], [2, 0]], [[0, 4], 9]], [4, [[9, 8], [3, 8]]]], [[[1, [6, 0]], [6, 5]], [3, 4]],
     [[2, [[4, 3], [4, 4]]], [[[9, 7], 8], [5, 0]]],
     [[[[1, 6], 2], [[3, 5], 0]], [[[4, 3], [8, 1]], [[5, 2], [2, 1]]]],
     [[[[4, 8], [1, 2]], [9, [3, 7]]], [1, [4, 4]]],
     [[[[2, 7], [5, 8]], [[2, 4], [6, 8]]], [9, 8]], [[[1, 5], [7, 0]], [[8, 7], 4]],
     [[[5, 3], [[0, 3], [6, 2]]], [[8, [7, 4]], [5, 6]]],
     [[[[1, 4], 1], [8, [2, 0]]], [[[0, 0], [7, 9]], [[1, 8], 3]]], [[[[0, 0], [4, 3]], 2], 3],
     [[[8, [8, 9]], [1, [6, 1]]], [[6, [5, 5]], [5, [9, 5]]]],
     [[[6, [4, 2]], [[1, 4], [5, 6]]], [0, [[5, 9], [2, 7]]]], [3, [[[2, 5], 2], 8]],
     [[2, [6, [1, 6]]], [0, [4, [9, 2]]]], [[[[7, 6], [5, 9]], [6, [6, 0]]], [2, [3, [1, 4]]]],
     [[[[1, 7], [7, 4]], [[6, 0], [5, 3]]], [2, [[5, 2], 0]]],
     [[[7, [6, 1]], [[1, 7], [7, 2]]], [5, 6]], [[3, 2], [6, [9, 7]]],
     [[[7, [7, 5]], [[0, 9], 5]], [[4, [5, 6]], [[8, 6], [1, 8]]]], [[[1, [1, 6]], 7], 2],
     [[[7, [6, 2]], 3], [[[5, 5], 6], 9]], [[[1, [9, 8]], [0, 5]], [[[2, 4], 5], [[5, 6], 7]]],
     [[[9, [1, 1]], [7, 0]], [[5, 8], 2]],
     [[[[8, 5], [3, 0]], [1, [2, 6]]], [[[4, 3], [3, 2]], 0]],
     [[[[0, 5], 7], [7, 1]], [4, [[3, 4], [9, 5]]]], [[[7, 6], [5, 1]], [9, 3]],
     [[[[5, 4], 6], [2, [0, 6]]], [[[6, 0], [9, 5]], [[8, 6], [3, 4]]]],
     [[0, [6, [9, 6]]], [[[1, 2], [9, 6]], [0, [6, 2]]]],
     [[[[7, 7], 6], 7], [[8, [0, 5]], [0, 2]]], [[[[6, 7], [0, 7]], [6, [5, 0]]], [6, 7]],
     [[7, [1, 8]], [[2, 3], [[7, 0], 3]]], [[8, [5, 7]], [[3, [6, 5]], 4]],
     [[9, 9], [[[9, 9], 9], [2, 3]]], [[[[0, 6], [1, 4]], 5], [1, 3]],
     [[[9, [8, 8]], [[9, 9], 7]], [2, [[7, 1], 6]]],
     [[[1, 8], [1, 3]], [[[8, 1], 8], [[4, 2], 1]]], [[4, 2], [[[0, 7], 5], 7]],
     [[[6, [3, 6]], [[0, 2], [5, 6]]], [[0, 1], [[0, 9], 2]]],
     [[[[4, 5], [1, 4]], 1], [[[4, 7], [2, 3]], 6]], [[[2, 2], [0, 6]], [[6, [6, 4]], 1]],
     [[[5, [7, 7]], [[7, 0], 1]], 2]].

-spec solve1(Input :: input_type()) -> result_type().
solve1(Input) ->
    magnitude(snailfish_add(Input)).

-spec solve2(Input :: input_type()) -> result_type().
solve2(Input) ->
    lists:max([magnitude(reduce([A, B])) || A <- Input, B <- Input, A =/= B]).

snailfish_add([A | Rest]) ->
    lists:foldl(fun(N, Acc) -> reduce([Acc, N]) end, A, Rest).

reduce(Xs) ->
    case explode(Xs) of
        Xs0 when Xs =:= Xs0 ->
            case split(Xs0) of
                S0 when S0 =:= Xs0 ->
                    S0;
                S0 ->
                    reduce(S0)
            end;
        Xs0 ->
            reduce(Xs0)
    end.

split(X) when is_integer(X) andalso X >= 10 ->
    Half = X / 2,
    A = trunc(math:floor(Half)),
    B = trunc(math:ceil(Half)),
    [A, B];
split(X) when is_integer(X) ->
    X;
split([A, B]) ->
    case split(A) of
        A0 when A =:= A0 ->
            [A0, split(B)];
        A0 ->
            [A0, B]
    end.

% Modified version of "flatten" which annotates each element with its depth.
annotate_depth([H | T], Tail, Depth) when is_list(H) ->
    annotate_depth(H, annotate_depth(T, Tail, Depth), Depth + 1);
annotate_depth([H | T], Tail, Depth) ->
    [{H, Depth} | annotate_depth(T, Tail, Depth)];
annotate_depth([], Tail, _) ->
    Tail.

explode(L) ->
    [_ | Exp] = maybe_explode([{0, 0}] ++ annotate_depth(L, [], 0) ++ [{0, 0}]),
    unflatten(lists:sublist(Exp, length(Exp) - 1)).

maybe_explode([{Left, Ld}, {A, Ad}, {B, Bd}, {Right, Rd} | Rest])
    when Ad == 4 andalso Bd == 4 ->
    [{Left + A, Ld}, {0, Ad - 1}, {Right + B, Rd} | Rest];
maybe_explode([L | Rest]) ->
    [L | maybe_explode(Rest)];
maybe_explode([]) ->
    [].

unflatten(Xs) ->
    case do_unflatten(Xs) of
        Xs0 when Xs0 =/= Xs ->
            unflatten(Xs0);
        [{L, _}] ->
            L
    end.

do_unflatten(Xs) ->
    case Xs of
        [] ->
            [];
        [{A, D}, {B, D} | Rest] ->
            [{[A, B], D - 1} | Rest];
        [N | Rest] ->
            [N | do_unflatten(Rest)]
    end.

magnitude(N) when is_integer(N) ->
    N;
magnitude([A, B]) ->
    magnitude(A) * 3 + magnitude(B) * 2.

%% Tests

-ifdef(TEST).

explode_test() ->
    ?assertEqual([[3, [2, [8, 0]]], [9, [5, [7, 0]]]],
                 explode([[3, [2, [8, 0]]], [9, [5, [4, [3, 2]]]]])),
    ?assertEqual([[[[0, 9], 2], 3], 4], explode([[[[[9, 8], 1], 2], 3], 4])).

reduce_test() ->
    ?assertEqual([[[[0, 7], 4], [[7, 8], [6, 0]]], [8, 1]],
                 reduce([[[[[4, 3], 4], 4], [7, [[8, 4], 9]]], [1, 1]])).

ex1_test() ->
    ?assertEqual([[[[1, 1], [2, 2]], [3, 3]], [4, 4]],
                 snailfish_add([[1, 1], [2, 2], [3, 3], [4, 4]])).

ex2_test() ->
    Numbers =
        [[[[0, [4, 5]], [0, 0]], [[[4, 5], [2, 6]], [9, 5]]],
         [7, [[[3, 7], [4, 3]], [[6, 3], [8, 8]]]],
         [[2, [[0, 8], [3, 4]]], [[[6, 7], 1], [7, [1, 6]]]],
         [[[[2, 4], 7], [6, [0, 5]]], [[[6, 8], [2, 8]], [[2, 1], [4, 5]]]],
         [7, [5, [[3, 8], [1, 4]]]],
         [[2, [2, 2]], [8, [8, 1]]],
         [2, 9],
         [1, [[[9, 3], 9], [[9, 0], [0, 7]]]],
         [[[5, [7, 4]], 7], 1],
         [[[[4, 2], 2], 6], [8, 7]]],
    Sum = snailfish_add(Numbers),
    ?assertEqual([[[[8, 7], [7, 7]], [[8, 6], [7, 7]]], [[[0, 7], [6, 6]], [8, 7]]], Sum).

magnitude_test() ->
    ?assertEqual(3488,
                 magnitude([[[[8, 7], [7, 7]], [[8, 6], [7, 7]]], [[[0, 7], [6, 6]], [8, 7]]])).

-endif.
